import React, { useState, useEffect } from "react";
import axios from "axios";
import "./mainpage.css";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  faAngleDoubleRight,
  faArrowDown,
  faArrowLeft,
  faBold,
  faCalendar,
  faCalendarAlt,
  faCancel,
  faCheck,
  faCode,
  faCoffee,
  faCross,
  faEye,
  faFile,
  faFileArchive,
  faImagePortrait,
  faItalic,
  faLink,
  faList12,
  faListDots,
  faListNumeric,
  faPenAlt,
  faPencil,
  faQuoteLeft,
  faTable,
  faTimes,
  faTrash,
} from "@fortawesome/free-solid-svg-icons";
import Login from "./Login/Login";
import Register from "./Register/Register";
import { saveAs } from "file-saver";

const Mainpage = () => {
  const [htmlResponse, setHtmlResponse] = useState("");
  const [highlightedText, setHighlightedText] = useState("");
  const [userInput, setUserInput] = useState("");
  const [userFile, setUserFile] = useState([]);
  const [selectedID, setSelectedID] = useState([]);
  const [fileStatus, setFileStatus] = useState(false);
  const [fileName, setFileName] = useState("");
  const [currentFile, setCurrentFile] = useState("");
  const [currentUserName, setCurrentUserName] = useState("");
  const [fileListStatus, setFileListStatus] = useState(false);
  const [isHovered, setIsHovered] = useState(false);
  const [darkScreen, setDarkscreen] = useState(false);
  const [hoveredButton, setHoveredButton] = useState(null);
  const [messageID, setMessageID] = useState(null);
  const [currentUserID, setCurrentUserID] = useState(null);
  const [smallScreen, setSmallScreen] = useState(null);

  const handleMouseEnter = (buttonName) => {
    setHoveredButton(buttonName);
  };

  const handleMouseLeave = () => {
    setHoveredButton(null);
  };

  const getUserInput = async (inputText) => {
    try {
      const response = await axios.post("http://localhost:5000/convertText", {
        he: inputText,
      });
      console.log("response", response.data);

      setHtmlResponse(response.data.html);
    } catch (error) {
      console.log(error);
    }
  };

  useEffect(() => {
    const handleMouseUp = () => {
      const selection = window.getSelection();
      if (selection) {
        const selectedText = selection.toString();
        setHighlightedText(selectedText);
      }
    };

    document.addEventListener("mouseup", handleMouseUp);

    return () => {
      document.removeEventListener("mouseup", handleMouseUp);
    };
  }, []);

  const handleUserInputChange = (e) => {
    const inputText = e.target.value;
    setUserInput(inputText);
    console.log("inputText", inputText);
    getUserInput(inputText);
    console.log("inputText", userInput);
  };

  const handleBoldClick = () => {
    if (highlightedText) {
      const boldedText = `<b>${highlightedText}</b>`;
      const newText = userInput.replace(highlightedText, boldedText);
      setUserInput(newText);
      setHtmlResponse(newText);
    }
  };

  const handleItalicClick = () => {
    if (highlightedText) {
      const italicedText = `<em>${highlightedText}</em>`;
      const newText = userInput.replace(highlightedText, italicedText);
      setUserInput(newText);
      setHtmlResponse(newText);
    }
  };

  const handleListClick = () => {
    if (highlightedText) {
      const List = highlightedText
        .split("\n")
        .map((line) => `<li>${line.trim()}</li>`)
        .join("");
      const newText = userInput.replace(highlightedText, List);
      setUserInput(newText);
      setHtmlResponse(newText);
    }
  };

  const handleSubListClick = () => {
    if (highlightedText) {
      const subList = `<ul>${highlightedText
        .split("\n")
        .map((line) => `<li>${line.trim()}</li>`)
        .join("")}</ul>`;
      const newText = userInput.replace(highlightedText, subList);
      setUserInput(newText);
      setHtmlResponse(newText);
    }
  };

  const handleCodeClick = () => {
    if (highlightedText) {
      const Code = `<code>${highlightedText}</code>`;
      const newText = userInput.replace(highlightedText, Code);
      setUserInput(newText);
      setHtmlResponse(newText);
    }
  };

  const handleTableClick = () => {
    if (highlightedText) {
      const Table = `<tr>${highlightedText}</tr>`;
      const newText = userInput.replace(highlightedText, Table);
      setUserInput(newText);
      setHtmlResponse(newText);
    }
  };

  const handleLinkClick = () => {
    if (highlightedText) {
      const Link = `<a>${highlightedText}</a>`;
      const newText = userInput.replace(highlightedText, Link);
      setUserInput(newText);
      setHtmlResponse(newText);
    }
  };

  const handleDownloads = async () => {
    const userDownload = document.getElementById("htmlResponse").innerHTML;
    console.log(userDownload);
    try {
      const response = await axios.post("http://localhost:5000/downloadFile", {
        userContent: userDownload,
        fileName: "First Download",
      });
      alert("File Downloaded");
    } catch (error) {
      console.log(error);
    }
  };

  const handleDownload = () => {
    const userDownload = document.getElementById("htmlResponse").innerHTML;

    const blob = new Blob([userDownload], {
      type: "text/markdown;charset=utf-8",
    });
    saveAs(blob, "document.md");
    alert("file Downloaded");
  };

  const newFile = async () => {
    const token = localStorage.getItem("token");
    // Check if userInput is defined and not an empty string
    if (!userInput || userInput.trim() === "") {
      setUserInput("Update your file");
      console.log("Set User Input");
    }

    try {
      const response = await axios.post("http://localhost:5000/createContent", {
        userContent: userInput,
        fileName: fileName,
        token: token,
      });
      console.log("Successful", fileName, token, userInput);
      alert("File created");
      console.log("new file response", response);
      setUserFile(response.data);
      setFileStatus(false);
    } catch (error) {
      console.error("An error occurred:", error);
    }

    console.log("Function ended");
  };

  const editFile = async () => {
    const userEdit = userInput;

    const fileID = selectedID;
    console.log(fileID);
    try {
      const response = await axios.post("http://localhost:5000/updateFile", {
        userEdit: userEdit,
        selectedID: selectedID,
      });
    } catch (error) {
      console.log(error);
    }
  };

  const deleteFile = async () => {
    const fileID = selectedID;
    console.log("fileID", fileID);
    try {
      const response = await axios.post("http://localhost:5000/deleteFile", {
        selectedID: fileID,
      });
      console.log("Delete response:", response.data);
    } catch (error) {
      console.error("Error deleting file:", error); // Log any errors to the console
      // Handle error: display a message to the user or perform other actions
    }
  };
  const deleteChat = async () => {
    if (!messageID) return;
    try {
      const response = await axios.delete("http://localhost:5000/deleteFile", {
        params: { messageID, currentUserID },
      });
      console.log("details", messageID, currentUserID);
      console.log("Response:", response.data);
      alert("Message deleted");
      setMessageID(null);
      setUserFile(response.data.updatedChat);
    } catch (error) {
      console.error(
        "Error deleting message:",
        error.response?.data || error.message
      );
      alert("Failed to delete message");
    }
  };

  useEffect(() => {
    if (messageID) {
      deleteChat();
    }
  }, [messageID]);

  const getFiles = async () => {
    const token = localStorage.getItem("token");

    try {
      const response = await axios.get("http://localhost:5000/getFiles", {
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });
      console.log(response);
      setUserFile(response.data);

      // console.log("userFile", userFile);
    } catch (error) {
      console.log(error);
    }
  };

  const viewFile = async () => {
    try {
      const response = await axios.post("http://localhost:5000/viewFile", {
        selectedID: selectedID,
      });
      const fileText = response.data.file.userInput;
      console.log(response.data.file.userInput);
      setUserInput(fileText);
    } catch (error) {
      console.log(error);
    }
  };

  const getFileId = (fileId) => {
    setSelectedID(fileId);
    console.log("done", selectedID);
    setUserInput("");
  };

  const getCurrentFile = (fileName) => {
    setCurrentFile(fileName);
    console.log("done", currentFile);
  };

  const togglenewFile = () => {
    setFileStatus(true);
    console.log(fileStatus);
  };

  const cancelToggle = () => {
    setFileStatus(false);
  };

  const createNewfile = (e) => {
    setFileName(e.target.value);
  };

  const viewStatusFalse = () => {
    setFileListStatus(false);
  };

  const viewStatusTrue = () => {
    setFileListStatus(true);
  };

  const checkSmallScreen = () => {
    setSmallScreen((prevState) => !prevState);
    if (smallScreen) {
      console.log(" small screen true");
    } else {
      console.log(" small screen false");
    }
  };

  const changeTheme =()=>{
    setDarkscreen((prevState) =>!prevState)
  }
  useEffect(() => {
    if (selectedID.length < 1) {
      setUserInput(`Hello, I am your first markdown file.I'm here to guide you on the features of this app.
  
  ## Text Formatting
  
  ### Basic Styling
  - **Bold** text: Use \`**\` or \`__\` around your text
  - *Italic* text: Use \`*\` or \`_\` around your text
  - Use # for H1, ## for H2, and so on.
  
  ## Code
  
  ### Inline Code
  Use backticks(\`) for inline code.
  
  ### Code Blocks
  \`\`\`python
  def hello_world():
      print("Hello, World!")
  \`\`\`
  
  To start working, click on the file icon at the far right to choose or create files. Cheers!!!!`);
    }
  }, [selectedID]);

  useEffect(() => {
    const userName = localStorage.getItem("currentUser");
    setCurrentUserName(userName);

    return () => {};
  }, []);

  return (
    <div className="flex overflow-x-hidden overflow-y-hidden allPage">
    
      <div className="w-full ">
      <div className="sticky top-0 bg-red-400 ">         
       <p className="flex flex-wrap  text-gray-50 w-screen h-10 ">
            <div className="flex pl-12 w-screen overflow-auto bg-slate-200 h-12">
              <button
                className="flex pe-10 pt-2 pl-4 hover:bg-slate-500 w-7  "
                onClick={() => {
                  getFiles();
                  viewStatusTrue();
                }}
                onMouseEnter={() => handleMouseEnter("fileArchive")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faFileArchive}
                  className=" text-2xl text-cyan-600 "
                />
                {/* text-indigo-600 */}

                {hoveredButton == "fileArchive" ? <p>View Files</p> : ""}
              </button>

              <button
                className="flex pe-10 pt-3 pl-2 hover:bg-slate-500 w-7"
                onClick={handleBoldClick}
                onMouseEnter={() => handleMouseEnter("bold")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faBold}
                  className="justify-center pl-2 text-slate-950 text-xl"
                />
                {hoveredButton == "bold" ? <p>Bold</p> : ""}
              </button>
              <button
                className="flex pe-10 font-bold pt-3 pl-2 hover:bg-slate-500 w-7"
                onClick={handleItalicClick}
                onMouseEnter={() => handleMouseEnter("Italic")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faItalic}
                  className="justify-center pl-2 text-slate-950 text-xl"
                />
                {hoveredButton == "Italic" ? <p>Italic</p> : ""}
              </button>
              <button
                className="flex pe-10 pt-3 pl-2 hover:bg-slate-500 w-7"
                onClick={handleListClick}
                onMouseEnter={() => handleMouseEnter("List")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faListNumeric}
                  className="justify-center pl-2 text-slate-950 text-xl"
                />
                {hoveredButton == "List" ? <p>List</p> : ""}
              </button>
              <button
                className=" flex pe-10 pt-3 pl-2 hover:bg-slate-500 w-7 "
                onClick={handleSubListClick}
                onMouseEnter={() => handleMouseEnter("SubList")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faListDots}
                  className="justify-center pl-2 text-slate-950 text-xl"
                />
                {hoveredButton == "SubList" ? <p>SubList</p> : ""}
              </button>

              <button
                className="flex pe-10 pt-3 pl-2 hover:bg-slate-500 w-7"
                onMouseEnter={() => handleMouseEnter("Quote")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faQuoteLeft}
                  className="justify-center pl-2 text-slate-950 text-xl"
                />
                {hoveredButton == "Quote" ? <p>Quote</p> : ""}
              </button>
              <button
                className="flex pe-10 pt-3 pl-2 hover:bg-slate-500 w-7"
                onClick={handleCodeClick}
                onMouseEnter={() => handleMouseEnter("Code")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faCode}
                  className="justify-center pl-2 text-slate-950 text-xl"
                />
                {hoveredButton == "Code" ? <p>Code</p> : ""}
              </button>
              {/* <button
              className="flex pe-10 pt-3 hover:bg-slate-500 w-7"
              onClick={handleTableClick}
              onMouseEnter={() => handleMouseEnter("Table")}
              onMouseLeave={handleMouseLeave}
            >
              <FontAwesomeIcon icon={faTable} className="justify-center pl-2" />
              {hoveredButton == "Table" ? <p>Table</p> : ""}
            </button> */}
              <button
                className="flex pe-10 pt-3 pl-2 hover:bg-slate-500 w-7"
                onClick={handleLinkClick}
                onMouseEnter={() => handleMouseEnter("Link")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faLink}
                  className="justify-center pl-2 text-slate-950 text-xl"
                />
                {hoveredButton == "Link" ? <p>Link</p> : ""}
              </button>
              <button
                className="flex pe-10 pt-3 pl-2 hover:bg-slate-500 w-7"
                onClick={handleDownload}
                onMouseEnter={() => handleMouseEnter("Download")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faArrowDown}
                  className="justify-center pl-2 text-slate-950 text-xl"
                />
                {hoveredButton == "Download" ? <p>Download</p> : ""}
              </button>
              <button
                className="flex pe-10 pt-3 pl-2 hover:bg-slate-500 hover:text-slate-50 w-7"
                onClick={editFile}
                onMouseEnter={() => handleMouseEnter("Edit")}
                onMouseLeave={handleMouseLeave}
              >
                <FontAwesomeIcon
                  icon={faPencil}
                  className="justify-center pl-2 text-slate-950 text-xl"
                />
                {hoveredButton == "Edit" ? <p>Edit File</p> : ""}
              </button>
              <div className="ml-auto flex bg-red-700" > <button onClick={changeTheme}>changeTheme</button></div>

            </div>

          </p>

          <div className="flex items-center justify-between  flex-wrap bg-slate-100 border-b-2 border-gray-200 border-solid p-2">
            <p className=" text-gray-300 text-3xl ml-4 font-bold font-serif ">
              {currentFile}
            </p>

            <div className="flex">
              <button
                onClick={editFile}
                className="text-center bg-cyan-600 text-white hover:text-gray-100 p-2 rounded mr-8 "
              >
                Save File
              </button>
            </div>
          </div>
        </div>

        <div className="flex w-auto">
          {!currentFile.length < 1 ? (
            <textarea
              className={`bg-slate-100 h-screen w-[100%] border-r-4 border-b-cyan-500 outline-none pl-12 pt-5 overflow-y-scroll  ${
    darkScreen ? "bg-black text-slate-50" : "bg-slate-100"} `}
              placeholder="start writing here"
              id="userInput"
              value={userInput}
              onChange={(e) => {
                handleUserInputChange(e);
              }}
            />
          ) : (
            <textarea
              className={`bg-slate-100 h-screen w-[100%] border-r-4 border-b-cyan-500 outline-none pl-12 pt-5 overflow-y-scroll  ${
                darkScreen ? "bg-black text-slate-50" : "bg-slate-100"} `}              placeholder="start writing here"
              id="userInput"
              value={userInput}
              onChange={handleUserInputChange}
            />
          )}
          <div
  className={`bg-slate-100 h-screen overflow-y-scroll outline-none p-10 ${
    !smallScreen ? "show w-[100%]" : "hide w-[50%]"
  } ${
    darkScreen ? "bg-black text-slate-50" : "bg-slate-100 "
  }`}
  id="htmlResponse"
  dangerouslySetInnerHTML={{ __html: htmlResponse }}
/>

<div className={`bg-slate-200 buttonContainer fixed  right-0 h-full ${
              darkScreen ? "bg-black" : "bg-black"
            }`}>
    <button
      className="responsiveView flex ml-auto text-gray-400 p-2 w-12 text-center items-center justify-center rounded cursor-pointer"
      onClick={checkSmallScreen}
    >
      {smallScreen ? (
        <FontAwesomeIcon icon={faPenAlt} className="text-xl" />
      ) : (
        <FontAwesomeIcon icon={faEye} />
      )}
    </button>
  </div>
        </div>
      </div>
      {fileListStatus && (
        <div className="bg-slate-500 py-3.5  w-80 h-screen flex flex-col overflow-y-auto fixed p-4">
          <div className="flex justify-between items-center pb-8">
            <h2 className="flex text-4xl text-teal-100">{currentUserName}</h2>
            <FontAwesomeIcon
              icon={faArrowLeft}
              onClick={viewStatusFalse}
              className="flex w-6 h-6 text-xl p-5 rounded-xs hover:bg-slate-400 hover:text-slate-100 text-slate-50 cursor-pointer"
            />
          </div>

          {userFile.map((file) => (
            <div
              key={file._id}
              className="mb-7 hover:bg-gray-600 text-gray-100 w-88 h-16 flex justify-between items-center mb-4 p-2 border-b border-slate-400"
            >
              <ul
                onClick={() => {
                  getFileId(file._id);
                  getCurrentFile(file.fileName);
                  viewFile();
                }}
              >
                <li> {file.fileName}</li>
              </ul>
              <FontAwesomeIcon
                icon={faTrash}
                onClick={() => {
                  if (
                    window.confirm("Are you sure you want to delete this file?")
                  ) {
                    setMessageID(file._id);
                    setCurrentUserID(file.userId);
                  }
                }}
              />
            </div>
          ))}
          <div>
            {fileStatus && (
              <div className="flex mb-7 text-gray-100 w-48">
                <FontAwesomeIcon icon={faCheck} onClick={newFile} />
                <input
                  placeholder="File name"
                  id="fileName"
                  className="flex bg-transparent border-white border-b-2 outline-none pl-5"
                  onChange={createNewfile}
                />
              </div>
            )}
          </div>
          <div className="flex mt-8 ml-auto">
            <button
              className="bg-slate-50 w-42 mr-auto pr-5 h-10"
              onClick={() => {
                togglenewFile();
              }}
            >
              Add a new File
            </button>
            {fileStatus && (
              <FontAwesomeIcon
                icon={faTimes}
                onClick={cancelToggle}
                className="bg-rose-700 text-gray-50 p-2 flex h-6"
              />
            )}
          </div>
        </div>
      )}
    </div>
  );
};

export default Mainpage;




